#include <Wire.h>
#include <hd44780.h>
#include <hd44780ioClass/hd44780_I2Cexp.h>
#include <WiFi.h>
#include <WebServer.h>
#include <ArduinoJson.h>
#include "time.h"
#include <Preferences.h>  // For persistent storage

// Function prototypes
void handleRoot();
void handleData();
void handleReset();
void handleHistory();
void updateDisplay(String line1, String line2);
void attemptWiFiConnection();
void updateDisplayForMode();
void syncTime();
void initDailyRecords();
void updateDayRecord();
String getCurrentDate();
int getMonthlyTotal();
String getSystemStatus();
String getDayMonthString();
void resetToday();
void resetAllHistory();
void loadFromStorage();
void saveToStorage();

// WiFi configuration
const char* ssid = "asd";
const char* password = "0555247204";

// NTP Configuration
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 10800; // 3 hours for GST
const int daylightOffset_sec = 0;

// Pin definitions
#define COUNTER_BTN 13
#define RESET_BTN 12
#define WIFI_BUTTON 15
#define MODE_BUTTON 26
#define LED_PIN 14

// LCD setup
hd44780_I2Cexp lcd(0x27, 16, 2);

// System variables
int count = 0;
bool ledActive = false;
unsigned long ledStartTime = 0;
const long ledDuration = 1000;

// Display mode
enum DisplayMode { CURRENT_COUNT, DAILY_COUNT, MONTHLY_TOTAL, SHOW_IP };
DisplayMode displayMode = CURRENT_COUNT;

// Button variables
unsigned long resetPressTime = 0;
const long resetDailyDuration = 5000;    // 5 seconds for daily reset
const long resetHistoryDuration = 10000; // 10 seconds for history reset
bool resetInProgress = false;
int resetStage = 0; // 0: waiting, 1: daily reset, 2: history reset

unsigned long wifiButtonPressTime = 0;
const long wifiButtonHoldDuration = 5000;
bool wifiButtonInProgress = false;

unsigned long modeButtonPressTime = 0;
bool modeButtonInProgress = false;

// Button state tracking
bool lastCounterState = HIGH;
bool lastWifiButtonState = HIGH;
bool lastModeButtonState = HIGH;
const long debounceDelay = 50;

// WiFi status
bool wifiConnected = false;
bool serverInitialized = false;
WebServer server(80);
bool initialWifiAttemptDone = false;
bool allowManualWifiAttempt = false;

// Time tracking
struct tm timeinfo;
unsigned long lastTimeSync = 0;
const long timeSyncInterval = 3600000;

// Daily count storage
struct DayRecord {
  int year;
  int month;
  int day;
  int count;
};

const int MAX_RECORDS = 31;
DayRecord dailyRecords[MAX_RECORDS];
int currentDayIndex = -1;
int recordCount = 0;

// Persistent storage
Preferences preferences;
const char* storageNamespace = "empCounter";
unsigned long lastSaveTime = 0;
const long saveInterval = 60000; // Save every 60 seconds

void setup() {
  Serial.begin(115200);
  
  // Initialize pins
  pinMode(COUNTER_BTN, INPUT_PULLUP);
  pinMode(RESET_BTN, INPUT_PULLUP);
  pinMode(WIFI_BUTTON, INPUT_PULLUP);
  pinMode(MODE_BUTTON, INPUT_PULLUP);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  updateDisplay("Initializing...", "");
 
  // Show startup message
  lcd.clear();
  lcd.print("Loading Data...");
  
  // Initialize persistent storage
  preferences.begin(storageNamespace, false);
  
  // Load saved data from storage
  loadFromStorage();
  
  // Configure time settings
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  
  // Single automatic WiFi attempt at startup
  attemptWiFiConnection();
  initialWifiAttemptDone = true;
  
  // Allow manual attempts only if initial connection failed
  if (!wifiConnected) {
    allowManualWifiAttempt = true;
    updateDisplay("Count: " + String(count), "Press WiFi Btn");
    delay(1000);

    server.on("/", handleRoot);
    server.on("/data", handleData);
    server.begin();
    Serial.println("HTTP server started");
  }
  
  // Initial display
  updateDisplayForMode();
}

void loop() {
  unsigned long currentMillis = millis();
  
  // Handle web server if connected
  if (wifiConnected) {
    server.handleClient();
    
    // Sync time periodically if connected
    if (currentMillis - lastTimeSync > timeSyncInterval) {
      syncTime();
      lastTimeSync = currentMillis;
    }
  }
  
  // Handle time-based updates even without WiFi
  updateDayRecord();
  
  // Handle LED timeout
  if (ledActive && (currentMillis - ledStartTime >= ledDuration)) {
    digitalWrite(LED_PIN, LOW);
    ledActive = false;
    updateDisplayForMode();
  }
  
  // Periodically save to storage
  if (currentMillis - lastSaveTime > saveInterval) {
    saveToStorage();
    lastSaveTime = currentMillis;
  }
  
  // Read current button states
  bool counterReading = digitalRead(COUNTER_BTN);
  bool resetReading = digitalRead(RESET_BTN);
  bool wifiButtonReading = digitalRead(WIFI_BUTTON);
  bool modeButtonReading = digitalRead(MODE_BUTTON);
  
  // Counter button handling
  if (counterReading != lastCounterState) {
    delay(debounceDelay);
    if (counterReading == LOW && !ledActive) {
      count++;
      if (currentDayIndex >= 0) {
        dailyRecords[currentDayIndex].count = count;
      }
      digitalWrite(LED_PIN, HIGH);
      ledActive = true;
      ledStartTime = currentMillis;
      updateDisplayForMode();
      
      // Save immediately on count change
      saveToStorage();
    }
    lastCounterState = counterReading;
  }
  
  // Reset button handling
  if (resetReading == LOW) {
    if (!resetInProgress) {
      resetInProgress = true;
      resetStage = 0;
      resetPressTime = currentMillis;
      updateDisplay("Reset Today?", "Hold 5s");
    }
    
    // Stage 1: Daily reset (5 seconds)
    if (resetInProgress && resetStage == 0 && (currentMillis - resetPressTime >= resetDailyDuration)) {
      resetStage = 1;
      updateDisplay("Reset History?", "Hold 10s");
    }
    
    // Stage 2: Full history reset (10 seconds)
    if (resetInProgress && resetStage == 1 && (currentMillis - resetPressTime >= resetHistoryDuration)) {
      resetAllHistory();
      resetInProgress = false;
      resetStage = 0;
      saveToStorage(); // Save after history reset
      // Wait for button release
      while(digitalRead(RESET_BTN) == LOW) { 
        delay(10); 
        if (wifiConnected) server.handleClient();
      }
      updateDisplayForMode();
    }
  } else {
    if (resetInProgress) {
      if (resetStage == 1) {
        resetToday();
        saveToStorage(); // Save after daily reset
      }
      resetInProgress = false;
      resetStage = 0;
      updateDisplayForMode();
    }
  }
  
  // WiFi button handling
  if (wifiButtonReading == LOW && allowManualWifiAttempt) {
    if (!wifiButtonInProgress) {
      wifiButtonInProgress = true;
      wifiButtonPressTime = currentMillis;
      updateDisplay("WiFi Button", "Hold 5s...");
    }
    
    if (wifiButtonInProgress && (currentMillis - wifiButtonPressTime >= wifiButtonHoldDuration)) {
      wifiButtonInProgress = false;
      attemptWiFiConnection();
      
      // Wait for button release
      while(digitalRead(WIFI_BUTTON) == LOW) { 
        delay(10);
        if (wifiConnected) server.handleClient();
      }
    }
  } else if (wifiButtonReading == HIGH) {
    if (wifiButtonInProgress) {
      wifiButtonInProgress = false;
      if (allowManualWifiAttempt) {
        updateDisplay("Count: " + String(count), "WiFi Canceled");
        delay(1000);
      }
      updateDisplayForMode();
    }
    lastWifiButtonState = wifiButtonReading;
  }
  
  // Mode button handling
  if (modeButtonReading == LOW) {
    if (!modeButtonInProgress) {
      modeButtonInProgress = true;
      modeButtonPressTime = currentMillis;
    }
  } else {
    if (modeButtonInProgress) {
      modeButtonInProgress = false;
      // Cycle through display modes
      displayMode = static_cast<DisplayMode>((displayMode + 1) % 4);
      updateDisplayForMode();
    }
    lastModeButtonState = modeButtonReading;
  }
}

// Web server handlers
void handleRoot() {
  if (!wifiConnected) {
    server.send(503, "text/plain", "WiFi not connected");
    return;
  }
  
  String html = "<!DOCTYPE html><html><head><title>Employee Access Counter</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
  html += "<style>body{background:#f5f5f5;color:#333;min-height:100vh;display:flex;flex-direction:column;align-items:center;padding:20px;text-align:center;}";
  html += ".container{background:white;border-radius:10px;padding:30px;max-width:800px;width:100%;box-shadow:0 5px 15px rgba(0,0,0,0.1);}";
  html += "h1{font-size:2.2rem;margin-bottom:20px;color:#2c3e50;}";
  html += ".stats{display:flex;justify-content:space-around;margin:25px 0;}";
  html += ".stat-card{background:#3498db;color:white;border-radius:10px;padding:20px;width:30%;box-shadow:0 4px 6px rgba(0,0,0,0.1);}";
  html += ".stat-card h3{font-size:1.2rem;margin-bottom:10px;}";
  html += ".stat-card .value{font-size:2.5rem;font-weight:bold;}";
  html += ".history-table{width:100%;border-collapse:collapse;margin:25px 0;}";
  html += ".history-table th,.history-table td{padding:12px 15px;text-align:center;border-bottom:1px solid #ddd;}";
  html += ".history-table th{background-color:#3498db;color:white;}";
  html += ".history-table tr:hover{background-color:#f1f1f1;}";
  html += ".controls{margin:25px 0;}";
  html += "button{background:#e74c3c;color:white;border:none;padding:12px 30px;font-size:1.1rem;border-radius:50px;cursor:pointer;margin:10px;transition:all 0.3s;}";
  html += "button:hover{background:#c0392b;transform:translateY(-2px);}</style></head><body><div class=\"container\">";
  html += "<h1>Employee Access Counter</h1><div class=\"stats\"><div class=\"stat-card\"><h3>Today's Count</h3><div class=\"value\" id=\"today-count\">0</div></div>";
  html += "<div class=\"stat-card\" style=\"background:#2ecc71;\"><h3>Monthly Total</h3><div class=\"value\" id=\"month-total\">0</div></div>";
  html += "<div class=\"stat-card\" style=\"background:#9b59b6;\"><h3>Records Stored</h3><div class=\"value\" id=\"record-count\">0</div></div></div>";
  html += "<h2>Daily Access History (Last 31 Days)</h2><table class=\"history-table\"><thead><tr><th>Date</th><th>Count</th></tr></thead><tbody id=\"history-body\"></tbody></table>";
  html += "<div class=\"controls\"><button onclick=\"resetCounter()\">Reset Today's Counter</button></div></div><script>";
  html += "function updateDisplay(data){document.getElementById('today-count').textContent=data.todayCount;";
  html += "document.getElementById('month-total').textContent=data.monthTotal;document.getElementById('record-count').textContent=data.recordCount;";
  html += "const historyBody=document.getElementById('history-body');historyBody.innerHTML='';";
  html += "data.history.forEach(record=>{const row=document.createElement('tr');const dateCell=document.createElement('td');";
  html += "dateCell.textContent=record.date;row.appendChild(dateCell);const countCell=document.createElement('td');";
  html += "countCell.textContent=record.count;row.appendChild(countCell);historyBody.appendChild(row);});}";
  html += "function fetchData(){fetch('/data').then(r=>r.json()).then(d=>updateDisplay(d));";
  html += "fetch('/history').then(r=>r.json()).then(d=>updateDisplay(d));}";
  html += "function resetCounter(){if(confirm(\"Reset today's counter to zero?\")){fetch('/reset').then(r=>{if(r.ok)fetchData();});}}";
  html += "fetchData();setInterval(fetchData,10000);</script></body></html>";
  
  server.send(200, "text/html", html);
}

void handleData() {
  StaticJsonDocument<512> doc;
  doc["todayCount"] = count;
  doc["monthTotal"] = getMonthlyTotal();
  doc["recordCount"] = recordCount;
  doc["currentDate"] = getCurrentDate();
  
  String json;
  serializeJson(doc, json);
  server.send(200, "application/json", json);
}

void handleHistory() {
  DynamicJsonDocument doc(2048);
  JsonArray history = doc.createNestedArray("history");
  
  for (int i = 0; i < recordCount; i++) {
    int idx = (currentDayIndex - i + MAX_RECORDS) % MAX_RECORDS;
    DayRecord record = dailyRecords[idx];
    if (record.year > 0) {
      JsonObject recordObj = history.createNestedObject();
      char dateStr[20];
      sprintf(dateStr, "%02d/%02d/%04d", record.day, record.month, record.year);
      recordObj["date"] = dateStr;
      recordObj["count"] = record.count;
    }
  }
  
  doc["todayCount"] = count;
  doc["monthTotal"] = getMonthlyTotal();
  doc["recordCount"] = recordCount;
  
  String json;
  serializeJson(doc, json);
  server.send(200, "application/json", json);
}

void handleReset() {
  resetToday();
  saveToStorage(); // Save after reset
  server.send(200, "text/plain", "Counter reset successfully");
}

// System functions
void updateDisplayForMode() {
  String status = getSystemStatus();
  String dateStr = getDayMonthString();
  
  // Format first line: [Status][Date] (10 chars status + 6 chars date)
  String line1 = status;
  if (line1.length() > 10) line1 = line1.substring(0, 10);
  else while (line1.length() < 10) line1 += ' ';
  line1 += dateStr;
  
  String line2;
  switch(displayMode) {
    case CURRENT_COUNT:
      line2 = "Count: " + String(count);
      break;
    case DAILY_COUNT:
      line2 = "Today: " + String(count);
      break;
    case MONTHLY_TOTAL:
      line2 = "Total: " + String(getMonthlyTotal());
      break;
    case SHOW_IP:
      if (wifiConnected) {
        line2 = WiFi.localIP().toString();
      } else {
        line2 = "No WiFi Connection";
      }
      break;
  }
  
  updateDisplay(line1, line2);
}

void updateDisplay(String line1, String line2) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(line1.substring(0, 16));
  
  lcd.setCursor(0, 1);
  lcd.print(line2.substring(0, 16));
  
  // Show WiFi status only when there's space
  if (line2.length() < 10) {
    lcd.setCursor(12, 1);
    lcd.print(wifiConnected ? "WiFi" : "NoWiFi");
  }
}

void attemptWiFiConnection() {
  lcd.clear();
  lcd.print(initialWifiAttemptDone && allowManualWifiAttempt ? "Manual WiFi Try" : "WiFi Connecting...");
  
  WiFi.disconnect(true);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  unsigned long startTime = millis();
  
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 20000) {
    delay(500);
    lcd.setCursor(0, 1);
    lcd.print("Attempt ");
    lcd.print((millis() - startTime) / 1000);
    lcd.print("s");
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    wifiConnected = true;
    allowManualWifiAttempt = false;
    lcd.clear();
    lcd.print("WiFi Connected!");
    lcd.setCursor(0, 1);
    lcd.print("IP: ");
    lcd.print(WiFi.localIP().toString().substring(0, 12));
    
    if (!serverInitialized) {
      server.on("/", handleRoot);
      server.on("/data", handleData);
      server.on("/reset", handleReset);
      server.on("/history", handleHistory);
      server.begin();
      serverInitialized = true;
    }
    
    syncTime();
    lastTimeSync = millis();
    delay(3000);
  } else {
    wifiConnected = false;
    lcd.clear();
    lcd.print("WiFi Failed");
    lcd.setCursor(0, 1);
    lcd.print("Use WiFi Button");
    delay(2000);
    if (!initialWifiAttemptDone) {
      allowManualWifiAttempt = true;
    }
  }
  
  updateDisplayForMode();
}

void initDailyRecords() {
  for (int i = 0; i < MAX_RECORDS; i++) {
    dailyRecords[i] = {0, 0, 0, 0};
  }
  recordCount = 0;
  currentDayIndex = -1;
  count = 0;
}

// Load data from persistent storage
void loadFromStorage() {
  // Try to load count
  count = preferences.getInt("count", 0);
  
  // Try to load record count
  recordCount = preferences.getInt("recCount", 0);
  
  // Try to load current day index
  currentDayIndex = preferences.getInt("curIdx", -1);
  
  // Try to load daily records
  if (preferences.getBytesLength("records") == sizeof(dailyRecords)) {
    preferences.getBytes("records", dailyRecords, sizeof(dailyRecords));
    Serial.println("Loaded records from storage");
  } else {
    Serial.println("No saved records found");
    initDailyRecords();
  }
  
  // Load last time sync
  lastTimeSync = preferences.getULong("lastSync", 0);
  
  Serial.println("Data loaded from storage");
  Serial.print("Count: "); Serial.println(count);
  Serial.print("Record Count: "); Serial.println(recordCount);
  Serial.print("Current Index: "); Serial.println(currentDayIndex);
}

// Save data to persistent storage
void saveToStorage() {
  preferences.begin("my-app", false);
  preferences.putInt("count", count);
  preferences.putInt("recCount", recordCount);
  preferences.putInt("curIdx", currentDayIndex);
  preferences.putBytes("records", dailyRecords, sizeof(dailyRecords));
  preferences.putULong("lastSync", lastTimeSync);
  Serial.println("Data saved to storage");
  preferences.end();
}

// Reset daily count at midnight
void updateDayRecord() {
  // Get current time
  if (!getLocalTime(&timeinfo, 0)) {
    return; // Time not available
  }
  
  int year = timeinfo.tm_year + 1900;
  int month = timeinfo.tm_mon + 1;
  int day = timeinfo.tm_mday;
  
  // Check if we have a current day record
  if (currentDayIndex >= 0) {
    DayRecord &current = dailyRecords[currentDayIndex];
    
    // If it's still the same day, update the count and return
    if (current.year == year && current.month == month && current.day == day) {
      current.count = count;
      return;
    }
  }
  
  // If we get here, it's a new day - reset the counter
  count = 0;
  
  // Create new record for the new day
  currentDayIndex = (currentDayIndex + 1) % MAX_RECORDS;
  dailyRecords[currentDayIndex] = {year, month, day, count};
  
  if (recordCount < MAX_RECORDS) {
    recordCount++;
  }
  
  // Save immediately on day change
  saveToStorage();
}

// Improved time sync
void syncTime() {
  if (wifiConnected) {
    // Configure time settings
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    
    // Try to get time with retries
    Serial.println("Syncing time with NTP server...");
    for (int i = 0; i < 10; i++) {
      if (getLocalTime(&timeinfo, 1000)) { // 1 second timeout
        Serial.println("Time synchronized successfully!");
        char timeStr[64];
        strftime(timeStr, sizeof(timeStr), "%A, %B %d %Y %H:%M:%S", &timeinfo);
        Serial.println(timeStr);
        lastTimeSync = millis();
        saveToStorage(); // Save sync time
        return;
      }
      Serial.println("Waiting for time sync...");
      delay(1000);
    }
    Serial.println("Failed to synchronize time");
  }
}

String getCurrentDate() {
  if (timeinfo.tm_year + 1900 >= 2023) { // Only consider valid if year is 2023 or later
    char dateStr[20];
    sprintf(dateStr, "%02d/%02d/%04d", timeinfo.tm_mday, timeinfo.tm_mon + 1, timeinfo.tm_year + 1900);
    return String(dateStr);
  }
  return "Date Unknown";
}

int getMonthlyTotal() {
  int total = 0;
  int currentMonth = timeinfo.tm_mon + 1;
  int currentYear = timeinfo.tm_year + 1900;
  
  for (int i = 0; i < recordCount; i++) {
    if (dailyRecords[i].month == currentMonth && dailyRecords[i].year == currentYear) {
      total += dailyRecords[i].count;
    }
  }
  return total;
}

String getSystemStatus() {
  if (ledActive) return "WAIT";
  if (resetInProgress) return "RESETTING";
  return "READY";
}

// Get day/month string (DD/MM)
String getDayMonthString() {
  if (timeinfo.tm_year + 1900 >= 2023) { // Only consider valid if year is 2023 or later
    char buffer[6];
    sprintf(buffer, "%02d/%02d", timeinfo.tm_mday, timeinfo.tm_mon + 1);
    return String(buffer);
  }
  return "??/??";
}

// Reset today's count only
void resetToday() {
  count = 0;
  if (currentDayIndex >= 0) {
    dailyRecords[currentDayIndex].count = 0;
  }
  digitalWrite(LED_PIN, LOW);
  ledActive = false;
  updateDisplay("Today Reset", "0");
  delay(1000);
}

// Reset entire history
void resetAllHistory() {
  initDailyRecords();
  saveToStorage();
  updateDisplay("History Reset", "All data cleared");
  delay(1000);
}
